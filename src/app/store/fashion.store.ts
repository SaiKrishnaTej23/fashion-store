import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import {fetchMen} from './fashionApi';

export interface FashionStoreState {
  men: any[];
  status: 'idle' | 'loading' | 'failed';
}

const initialState: FashionStoreState = {
  men: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getMenAsync = createAsyncThunk(
  'fashionStore/fetchMen',
  async () => {
    const response = await fetchMen();
    // The value we return becomes the `fulfilled` action payload
    return response as any[];
  }
);

export const fashionStoreSlice = createSlice({
  name: 'fashionStore',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
   
    // Use the PayloadAction type to declare the contents of `action.payload`
    updateMen: (state, action: PayloadAction<any>) => {
      state.men = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getMenAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getMenAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.men = action.payload;
      })
      .addCase(getMenAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { updateMen } = fashionStoreSlice.actions;


export const selectMen = (state: RootState) => state.fashionStore.men;



export default fashionStoreSlice.reducer;
